<?php

namespace Kitpages\CmsBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Kitpages\CmsBundle\Entity\PagePublish;
use Kitpages\CmsBundle\Entity\NavPublish;
/**
 * NavPublishRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NavPublishRepository extends NestedTreeRepository
{
    public function findByNoPagePublish()
    {

        $listNavPublish = $this->_em
            ->createQuery('SELECT np FROM KitpagesCmsBundle:NavPublish np JOIN np.page p LEFT JOIN p.pagePublish pb WHERE pb.id is null')
            ->getResult();
        return $listNavPublish;
     }
 
    public function findByPageIsNotInNavigation()
    {
        $listNavPublish = $this->_em
            ->createQuery('SELECT np FROM KitpagesCmsBundle:NavPublish np JOIN np.page p WHERE p.isInNavigation = 0')
            ->getResult();        
        return $listNavPublish;
     }  
     
    public function removeWithChildren(NavPublish $navPublish)
    {

        // remove the node from database
        $dql = "
            DELETE KitpagesCmsBundle:NavPublish np
            WHERE np.left >= :left AND np.right <= :right
        ";
        $this->_em
            ->createQuery($dql)
            ->setParameter("left", $navPublish->getLeft())
            ->setParameter("right", $navPublish->getRight())
            ->getResult();

    }
    
    public function childrenOfDepth(NavPublish $navPublish, $depth)
    {   
        $navPublishList = $this->_em
            ->createQuery('SELECT np FROM KitpagesCmsBundle:NavPublish np WHERE np.right < :right AND np.left > :left AND np.level = :level')
            ->setParameter("level", $navPublish->getLevel()+$depth)
            ->setParameter("right", $navPublish->getRight())
            ->setParameter("left", $navPublish->getLeft())
            ->getResult();        
        return $navPublishList;
     }
     

    public function parentBetweenTwoDepth(NavPublish $navPublish, $startLevel, $endLevel)
    {   
        $navPublishList = $this->_em
            ->createQuery('SELECT np FROM KitpagesCmsBundle:NavPublish np WHERE np.right > :right AND np.left < :left AND np.level >= :levelMin AND np.level <= :levelMax')
            ->setParameter("right", $navPublish->getRight())
            ->setParameter("left", $navPublish->getLeft())
            ->setParameter("levelMin", $startLevel)
            ->setParameter("levelMax", $endLevel)
            ->getResult();        
        return $navPublishList;
    }        
    
    public function childOfPageWithForParentOtherPage(NavPublish $navPublishParent, NavPublish $navPublishChild, $depth)
    {   
        $listPage = $this->_em
            ->createQuery('SELECT np FROM KitpagesCmsBundle:NavPublish np WHERE np.right >= :rightChild AND np.left <= :leftChild AND np.right <= :rightParent AND np.left >= :leftParent AND np.level = :level')
            ->setParameter("level", $navPublishParent->getLevel()+$depth)
            ->setParameter("rightChild", $navPublishChild->getRight())
            ->setParameter("leftChild", $navPublishChild->getLeft())
            ->setParameter("rightParent", $navPublishParent->getRight())
            ->setParameter("leftParent", $navPublishParent->getLeft())                    
            ->getResult(); 
        if (count($listPage) == 1) {
            return $listPage[0];
        } else {
            return null;
        }        
    }   
    
     
}